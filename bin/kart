#!/usr/bin/env node

const inquirer = require('inquirer');
const yargs = require('yargs');
const pkg = require('../package.json');
const kart = require('../lib');
require('colors');
const gitRev = require('git-rev-sync');
const fs = require('fs');
const os = require('os');
const path = require('path');
const { EventEmitter } = require('events');
const updateNotifier = require('update-notifier');

const KART_RC_PATH = `${os.homedir()}/.kartrc`;

updateNotifier({ pkg }).notify();

/* eslint no-console: "off" */

function handleError(e) {
    if (process.env.DEBUG) {
        console.error(e);
    } else {
        console.log(e.message.red);
    }
}

function selectProject(opts) {
    let projects;
    let project;
    let channel;

    opts = opts || {};

    return kart.getProjects()
        .then((p) => {
            projects = p;
            const choices = Object.keys(projects);
            const dir = path.basename(process.cwd());

            /* Skip prompt when the user passed name via CLI args */
            if (opts.name) {
                if (choices.indexOf(opts.name) >= 0) {
                    console.log(`Project: ${opts.name.cyan}`);
                    return Promise.resolve({ project: opts.name });
                }
                throw new Error('Project name not recognised');
            } else {
                return inquirer.prompt([{
                    type: 'list',
                    name: 'project',
                    message: 'Which project',
                    paginated: true,
                    choices,
                    default: choices.indexOf(dir) >= 0 ? dir : null,
                }]);
            }
        }).then((answers) => {
            ({ project } = answers);
            const choices = Object.keys(projects[project].channels);

            /* Skip prompt when the user passed channel via CLI args */
            if (opts.channel) {
                if (choices.indexOf(opts.channel) >= 0) {
                    console.log(`Channel: ${opts.channel.cyan}`);
                    return Promise.resolve({ channel: opts.channel });
                }
                throw new Error(`Channel doesn't exist for ${project}`);
            } else {
                return inquirer.prompt([{
                    type: 'list',
                    name: 'channel',
                    message: 'Which channel',
                    paginated: true,
                    choices,
                }]);
            }
        }).then((answers) => {
            ({ channel } = answers);

            return kart.status(project, channel);
        })
        .then(s => ({
            name: project,
            channel,
            status: s,
            config: projects[project],
        }))
        .catch(e => handleError(e));
}

function _zeroPad(v) {
    return (`0${v}`).slice(-2);
}

function _formatDate(d) {
    return `${_zeroPad(d.getDate())}/${_zeroPad(d.getMonth() + 1)}/${d.getFullYear()} ` +
           `${_zeroPad(d.getHours())}:${_zeroPad(d.getMinutes())}:${_zeroPad(d.getSeconds())}`;
}

function printStatus(project, channel, rel, config) {
    console.log();
    console.log(`Current ${channel.cyan} release of ${project.cyan}:`);

    if (rel) {
        console.log(`    Version:  ${`${rel.buildVersion}`.yellow}`);
        if (rel.metadata.revision) {
            console.log(`    Commit:   ${rel.metadata.revision}`);
            if (config.github) {
                console.log(`              ${`https://github.com/${config.github}/commit/${rel.metadata.revision}`.gray}`);
            }
        } else {
            console.log(`    Commit:   ${'???'.gray}`);
        }
        console.log(`    Built:    ${_formatDate(rel.buildDate)}`);
        console.log(`    Deployed: ${_formatDate(rel.releaseDate)}`);
    } else {
        console.log(`    Version:  ${'unknown'.red}`);
        console.log(`    Commit:   ${'???'.gray}`);
        console.log(`    Built:    ${'???'.gray}`);
        console.log(`    Deployed: ${'???'.gray}`);
    }
    console.log();
}

// ----

function release(argv) {
    let project;

    return selectProject(argv).then((p) => {
        project = p;

        printStatus(project.name, project.channel, project.status, project.config);

        return kart.archive.list(project.name, project.channel, {
            sort: {
                key: 'buildDate',
                order: -1,
            },
        });
    }).then((builds) => {
        if (argv.build) {
            const versions = builds.map(b => `${b.version}-${b.number}`);
            const index = versions.indexOf(argv.build);

            if (builds.length > 0 && argv.build === 'latest') {
                console.log(`Releasing ${versions[0].yellow}`);
                return Promise.resolve({ build: builds[0] });
            } else if (index >= 0) {
                console.log(`Releasing ${versions[index].yellow}`);
                return Promise.resolve({ build: builds[index] });
            }
            throw new Error(`Build ${argv.build.yellow} not found`);
        } else {
            const choices = builds.map((build) => {
                const choice = {
                    name: `${build.buildVersion} (${_formatDate(build.buildDate)})`,
                    value: build,
                };

                if (project.status &&
                        project.status.version === build.version &&
                        project.status.number === build.number) {
                    choice.name += ' (current)'.yellow;
                }

                return choice;
            });

            if (choices.length > 0) {
                choices[0].name += ' (latest)'.gray;
            }

            return inquirer.prompt([{
                type: 'list',
                name: 'build',
                message: 'Pick a build to deploy',
                paginated: true,
                choices,
            }]);
        }
    }).then((answers) => {
        const { build } = answers;

        return build.fetchMetadata().then(() => build);
    })
        .then((build) => {
            console.log('');
            console.log('Build details');
            console.log(`    Version: ${build.buildVersion.yellow}`);

            if (build.metadata.revision) {
                console.log(`    Commit:  ${build.metadata.revision}`);
                if (project.config.github) {
                    console.log(`             ${`https://github.com/${project.config.github}/commit/${build.metadata.revision}`.gray}`);
                }
            }

            console.log(`    Built:   ${_formatDate(build.buildDate).cyan}`);
            console.log('');

            /* Skip confirmation in non-interactive mode */
            if (argv.name && argv.channel && argv.build) {
                return Promise.resolve({ proceed: true });
            }
            return inquirer.prompt([{
                type: 'confirm',
                name: 'proceed',
                message: 'All good?',
                default: false,
            }])
                .then((answers) => {
                    if (answers.proceed) {
                        const reporter = new EventEmitter();
                        reporter.on('update', (detail) => {
                            console.log('    ', detail.message);
                        });

                        console.log(`Deploying ${build.project.cyan} ${build.buildVersion.yellow} to ${build.channel.cyan}`);
                        return kart.release(build, reporter)
                            .then(() => {
                                const { url } = project.config.channels[project.channel];
                                if (url) {
                                    console.log(`Deployed to ${url.yellow}`);
                                }
                            });
                    }
                    console.log('Aborted');
                    return null;
                });
        })
        .catch(e => handleError(e));
}

function status(argv) {
    return selectProject(argv).then((p) => {
        printStatus(p.name, p.channel, p.status, p.config);
    });
}

// ----

function archive(argv) {
    let build;
    const packagejsonPath = `./${path.normalize(`${argv.fromRepo}/package.json`)}`;
    let packagejson;
    let name;
    let version;
    let metadata;

    if (argv.fromRepo) {
        try {
            packagejson = JSON.parse(fs.readFileSync(packagejsonPath, 'utf8'));
            ({ name } = packagejson);
            ({ version } = packagejson);
        /* eslint no-empty: "off" */
        } catch (err) {}

        metadata = {
            revision: gitRev.long(argv.fromRepo),
        };
    }

    name = argv.name ? argv.name : name;
    version = argv.buildVersion ? argv.buildVersion : version;
    const type = argv['archive-type'] ? argv['archive-type'] : 'tar.gz';

    return kart.archive.store(
        argv.buildDir,
        name,
        argv.channel,
        version,
        null,
        argv.arch,
        metadata,
        type,
    )
        .then((b) => {
            build = b;

            console.log(build.publicUrl);

            if (argv.release) {
                return kart.release(build);
            }
            return null;
        }).catch(e => handleError(e));
}

/* Used for testing the UI only */
function setupMockS3(root) {
    try {
        /* eslint global-require: "off" */
        /* eslint import/no-extraneous-dependencies: "off" */
        const AWSMock = require('mock-aws-s3');

        AWSMock.config.basePath = root;
        const s3mock = AWSMock.S3();

        kart.__mockS3API(s3mock);
        console.log('!!! RUNNING IN TESTING MODE !!!'.red);
    } catch (err) {
        throw new Error('Failed to configure kart for testing.');
    }
}

function handleCommonOptions(argv) {
    const rcPath = argv.mockS3Root ? null : KART_RC_PATH;
    const configOverrides = {};

    if (argv.mockS3Root) {
        setupMockS3(argv.mockS3Root);
    }

    if (argv.archiveRoot) {
        configOverrides.rootBucket = {
            name: argv.archiveRoot,
        };
    }

    return kart.configure(configOverrides, rcPath);
}

// ----

yargs
    .options({
        'archive-root': {
            describe: 'override archive root bucket',
            type: 'string',
            alias: 'a',
        },
        'mock-s3-root': {
            type: 'string',
            hidden: true,
        },
    })
    .command('release', 'deploy a new release of a project', {
        name: {
            alias: 'n',
            describe: 'project to be released',
            type: 'string',
        },
        channel: {
            alias: 'c',
            describe: 'channel to be released',
            type: 'string',
        },
        build: {
            alias: 'b',
            describe: 'build tag (e.g., 0.3.3-4 or latest)',
            type: 'string',
        },
    }, (argv) => {
        handleCommonOptions(argv).then(() => {
            console.log('kart: Making a release');
            return kart.getMOTD();
        }).then((motd) => {
            if (motd) {
                console.log(`\n${motd}\n`);
            }

            return release(argv).catch((err) => {
                console.log(`Release failed: ${err}`);
            });
        });
    })
    .command('status', 'show current deployments for a project', {
        name: {
            alias: 'n',
            describe: 'project to query',
            type: 'string',
        },
        channel: {
            alias: 'c',
            describe: 'channel to show',
            type: 'string',
        },
    }, (argv) => {
        handleCommonOptions(argv).then(() => {
            console.log('kart: Showing status for channel');
            return kart.getMOTD();
        }).then((motd) => {
            if (motd) {
                console.log(`\n${motd}\n`);
            }

            status(argv).catch((err) => {
                console.log(err);
            });
        });
    })
    .command('archive <build-dir>', 'archive a build', {
        'from-repo': {
            alias: 'r',
            describe: 'path to repository related to the build (for autodetecting params)',
            type: 'string',
        },
        name: {
            describe: 'set project name (or override autodetected one)',
            type: 'string',
        },
        'build-version': {
            alias: 'V',
            describe: 'set project version (or override autodetected one)',
            type: 'string',
        },
        revision: {
            describe: 'set project revision (or override autodetected one)',
            type: 'string',
        },
        arch: {
            describe: 'set build arch (defaults to all)',
            type: 'string',
            default: 'all',
        },
        channel: {
            alias: 'c',
            describe: 'build to be archived',
            type: 'string',
            demandOption: true,
        },
        release: {
            describe: 'release after archiving',
            type: 'boolean',
        },
        'archive-type': {
            alias: 't',
            describe: 'set the compression type (defaults to tar.gz)',
            choices: ['tar.gz', 'zip', 'ditto', 'none'],
            default: 'tar.gz',
        },
    }, (argv) => {
        handleCommonOptions(argv).then(() => archive(argv));
    })
    .alias('h', 'help')
    .help('help')

    .alias('v', 'version')
    .version(() => pkg.version)
    .describe('v', 'show version information');
